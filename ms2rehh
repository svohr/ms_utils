#! /usr/bin/env python
#
# ms2rehh
#
# Takes ths output from ms simulation and converts it to the format used by
# REHH. 
#
# Sam Vohr (svohr@soe.ucsc.edu)
# August 2012
#

import optparse
import re
import string
import sys
import os
import collections

TRAN_TAB = string.maketrans( '01', '12' )

def translate_pos( positions, length ):
    """ Converts the relative positions into base positions given the length
        of the locus. """
    # if we have more sites than the locus's length, change the length to 
    # the number of sites we have. This is an extreme case.
    if len(positions) > length:
        length = len(positions)
    # Make sure there are no double hits here. Shift sites that occur at the
    # same bases over by one.
    bases = [ int( p * length ) for p in positions ] 
    base_count = collections.Counter(bases)
    while base_count.most_common(1)[0][1] > 1:
        for b in base_count.keys():
            i = 1
            # for each site over 1, move a site over to the next one.
            while base_count[b] > 1:
                base_count[b] -= 1
                base_count[ (b+i) % length ] += 1
                i += 1
    return base_count.keys()


def write_hap_file( hap_out, hap_lines ):
    """ Writes the haplotypes into the REHH hap file format. Translates 
        0 = ancestral, 1 = derived into 1 = ancestral, 2 = derived. """
    hap_num = 1
    name_format = 'hap%%0%dd' % len(str(len(hap_lines)))
    for hap_line in hap_lines:
        hap = list( hap_line.translate( TRAN_TAB ) )
        # write out this haplotype
        hap_str = ' '.join(hap)
        hap_name = name_format % hap_num
        hap_out.write( '%s %s\n' % (hap_name, hap_str) )
        hap_num += 1
    return

def write_map_file( map_out, site_positions, sample_num=1 ):
    """ Writes a REHH map file for the simulated polymorphic sites """
    site_num = 1
    name_format = 'site%%0%dd' % len(str(len(site_positions)))
    for site_pos in sorted(site_positions):
        site_name = name_format % site_num
        map_out.write( '%s %d %d 1 2\n' % (site_name, sample_num, site_pos) )
        site_num += 1
    return

def process_sample_set( sample_name, sample_num, lines, length ):
    """ Reads the data for a single sample """
    sites_line = lines[0]
    # positions need to be read from the text.
    positions = [ float(p) for p in lines[1].split()[1:] ]
    hap_lines = lines[2:]
    base_pos = translate_pos( positions, length )
    # write the .hap file.
    hap_file = open('%s.hap' % sample_name, 'w')
    write_hap_file( hap_file, hap_lines )
    hap_file.close()
    # write the .map file.
    map_file = open('%s.map' % sample_name, 'w')
    write_map_file( map_file, base_pos, sample_num )
    map_file.close()
    return


def process_ms_input( ms_in, name, length ):
    """ Processes all of the input from ms and writes out REHH .hap and .map 
        files for each replicate. """
    sample_num = 0
    cmd = ms_in.readline()
    cmd_items = cmd.split()
    replicates = int(cmd_items[2])
    name_format = '%s%%0%dd' % (name, len(str(replicates)))
    sample_lines = None
    for line in ms_in:
        line = line.rstrip()
        if line == '':
            continue # do nothing on a blank line.
        elif line.startswith('//'):
            # process the last sample set.
            if sample_lines is not None:
                process_sample_set( sample_name, sample_num, sample_lines, length )
            # start a new sample set 
            sample_num += 1
            sample_name = name_format % sample_num
            sample_lines = list()
        elif sample_lines is not None:
            sample_lines.append( line )
    # process the final simulation.
    if sample_lines is not None and sample_lines != []:
        process_sample_set( sample_name, sample_num, sample_lines, length )
    return


def main(argv=None):
    '''Read each line, swap for ancestral allele if necessary, and transpose'''
    
    if argv is None:
        argv = sys.argv

    usage = 'ms2rehh [OPTIONS] [ms_output_file]'
    parser = optparse.OptionParser(usage=usage)
    
    parser.add_option('-o', '--out', default='sim', dest='prefix', \
                      help='Output file prefix.' )
    parser.add_option('-s', '--size', default=1000000, dest='size', \
                      help='Size of locus (in bases).')
    (opts, args) = parser.parse_args()

    # Read from standard in by default.
    ms_in = sys.stdin

    if len(args) > 0:
        ms_in = open(args[0],'r')

    process_ms_input( ms_in, opts.prefix, int(opts.size) )

    ms_in.close()
    return 0

if __name__ == "__main__":
    sys.exit(main())

